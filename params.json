{"name":"autopack","tagline":"get your scripts together","body":"![autopack logo](http://ipfs.pics/ipfs/QmeVeB9t5EPZjLHP9cCZbeSqb1wQccoJR1vpKFYg6YRuwR)\r\nAutoPack runs through all the JavaScript and CSS references in your HTML file and spits out an HTML file that only loads one bundled and minimized .css and .js file. It also copies other files you specify into your build directory. Everything is configurable; AutoPack can also do nothing at all if you want it to.\r\n\r\n## Usage\r\n\r\n#### Command Line usage\r\n1. Install the package globally:\r\n```sh\r\n$ npm install -g autopack\r\n```\r\n3. CD to your projects directory and create a configuration file.\r\n```sh\r\n$ cd my_project\r\n$ autopack init\r\n```\r\n\r\n3. Run `autopack`\r\n```sh\r\n$ autopack\r\n```\r\n\r\n#### CLI Flags\r\nRun `autopack` in your console with the following optional flags.\r\n\r\nFlag                        | Description\r\n----------------------------|---------------------------------------------------------\r\n`--autopackfile`, `--config`| Specify the location of the autopackfile.\r\n`--cwd`                     | Change the current working directory.\r\n`-i`, `--input`             | The HTML file you want AutoPack to work on.\r\n`-o`, `--output`            | The directory you want AutoPack to save the converted files to.\r\n\r\n#### CLI Commands\r\nCommand                     | Description\r\n----------------------------|---------------------------------------------------------\r\n`autopack`                  | Run autopack\r\n`autopack init`             | Create an autopackfile in the current directory.\r\n\r\n\r\n\r\n\r\n\r\n#### API usage (i.e. in a build process) Needs further testing\r\n<del>\r\nInstall the package via npm:\r\n```sh\r\n$ npm install autopack --savedev\r\n```\r\nRequire it in your build file.\r\n```js\r\nvar autopack = require('autopack');\r\n```\r\nCall the `autopack` function with options.\r\n```js\r\nautopack({ input: \"dev/index.html\",\r\n          output: \"build/index.html\" });\r\n```\r\n</del>\r\n\r\n## Configuration\r\nYou can configure AutoPack by creating a file named autopackfile.js in the root directory of your project. The default configuration looks like this:\r\n\r\n```js\r\n{\r\n  pack:{\r\n    html: {\r\n      name: 'index.html', //name of the resulting html file, will be same as entry file if omitted\r\n      minify: false //set to true if you want to minify the resulting html\r\n    },\r\n    js: { //either set to true to use the defaults or use an object\r\n      name: 'bundle.js', //name of the resulting concatenated javascript\r\n      local: {\r\n        concat:true, //add local javascript file references to the bundled file\r\n        minify:true  //minify local javascript files\r\n      },\r\n      inline: {\r\n        concat:false, //add inline javascript to the bundled file\r\n        minify:false  //minify inline javascript\r\n      },\r\n      // filenames, urls or dom-selectors of elements you want to exclude from the process,\r\n      exclude: [] \r\n      // selector of element where you want to append the bundle script tag to\r\n      append: 'body' \r\n    },\r\n    css: { //either set to true to use the defaults or use an object\r\n      name: 'style.css', //name of the resulting concatenated css\r\n      local: {\r\n        concat:true, //add local css file references to the bundled file\r\n        minify:true  //minify local css files\r\n      },\r\n      inline: {\r\n        concat:false, //add inline css to the bundled file\r\n        minify:false  //minify inline css\r\n      },\r\n      // selector of element where you want to append the bundle css tag to\r\n      append: 'head',\r\n      // filenames, urls or dom-selectors of elements you want to exclude from the process \r\n      exclude: [] \r\n    },\r\n\r\n  },\r\n  copy: [], //files found under these patterns will be copied into the output directory\r\n  remove: [] // filenames, urls or dom-selectors of elements you want to remove from the resulting html\r\n}\r\n```\r\n\r\nExample autopackfile\r\n```js\r\nmodule.exports = {\r\n  entry: 'index.html',\r\n  output: 'build',\r\n  pack:{\r\n    html:{\r\n      name: 'index.html',\r\n      minify: false\r\n    },\r\n    css:{\r\n      name: 'style.css',\r\n      local: { concat: true, minify: true },\r\n      inline: { concat: false, minify: true }\r\n    },\r\n    js:{\r\n      name: 'bundle.js',\r\n      local: { concat: true, minify: true },\r\n      inline: { concat: false, minify: true },\r\n      exclude: ['scripts/settings.js']\r\n    }\r\n  },\r\n  //files found under these patterns will be copied into the output dir\r\n  copy: ['images/**', '**/*.gif', 'fonts/*.ttf', 'fonts/*.woff', 'fonts/*.otf'],\r\n  //These resources/elements will be removed from the html code\r\n  remove:['http://localhost:35729/livereload.js', '#dev-info', 'debug.css']\r\n};\r\n```\r\n\r\n## Known Issues\r\nAutoPack is still a work in progress. Don't expect it to work rightaway in your project. If you find any issues please report them.\r\n\r\n#### Script dependency\r\nAutoPack can alter the order in which scripts are executed if for example only local scripts are being concatenated. This can result in problems with dependencies in inline scripts. Consider the following scenario:\r\n```js\r\n//settings.js\r\nmySettings = {background:'#fff'};\r\n```\r\n```js\r\n//main.js\r\nfunction start(){\r\n  console.log(mySettings.background);\r\n}\r\n```\r\n\r\n```html\r\n<script src=\"settings.js\"/>\r\n<script> mySettings.background = '#000'; </script>\r\n<script src=\"main.js\"/>\r\n```\r\nThe packed version can result in the following HTML:\r\n```html\r\n<script> mySettings.background = '#000'; </script>\r\n<script src=\"bundle.js\"/>\r\n```\r\nNow the inline script is not able to find the variable `mySettings` (which is being set in `settings.js`). To get rid of problems like this either append the resulting JavaScript file before the inline script or add additional logic to run the script after everything is loaded:\r\n\r\n```html\r\n<script src=\"settings.js\">\r\n<script>\r\nwindow.onload = function(){ mySettings.background = '#000'; start(); }\r\n</script>\r\n<script src=\"main.js\">\r\n```","google":"UA-69257645-1","note":"Don't delete this file! It's used internally to help with page regeneration."}